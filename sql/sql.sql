 SELECT c.oid, n.nspname AS schemaname, c.relname AS tablename, c.relacl, pg_get_userbyid(c.relowner) AS tableowner, obj_description(c.oid) AS description, c.relkind, ci.relname As cluster, c.relhasindex AS hasindexes, c.relhasrules AS hasrules, t.spcname AS tablespace, c.reloptions AS param, c.relhastriggers AS hastriggers, c.relpersistence AS unlogged, ft.ftoptions, fs.srvname, c.relispartition, pg_get_expr(c.relpartbound, c.oid) AS relpartbound, c.reltuples, ((SELECT count(*) FROM pg_inherits WHERE inhparent = c.oid) > 0) AS inhtable, i2.nspname AS inhschemaname, i2.relname AS inhtablename FROM pg_class c LEFT JOIN pg_namespace n ON n.oid = c.relnamespace LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace LEFT JOIN (pg_inherits i INNER JOIN pg_class c2 ON i.inhparent = c2.oid LEFT JOIN pg_namespace n2 ON n2.oid = c2.relnamespace) i2 ON i2.inhrelid = c.oid LEFT JOIN pg_index ind ON(ind.indrelid = c.oid) and (ind.indisclustered = 't') LEFT JOIN pg_class ci ON ci.oid = ind.indexrelid LEFT JOIN pg_foreign_table ft ON ft.ftrelid = c.oid LEFT JOIN pg_foreign_server fs ON ft.ftserver = fs.oid WHERE ((c.relkind = 'r'::"char") OR (c.relkind = 'f'::"char") OR (c.relkind = 'p'::"char")) AND n.nspname = 'public' AND c.relname = 'knowledge' ORDER BY schemaname, tablename

 SELECT col.table_schema AS schema_name, col.table_name, col.column_name, col.character_maximum_length, col.is_nullable, col.numeric_precision, col.numeric_scale, col.datetime_precision, col.ordinal_position, b.atttypmod, b.attndims, col.data_type AS col_type, et.typelem, et.typlen, et.typtype, nbt.nspname AS elem_schema, bt.typname AS elem_name, b.atttypid, col.udt_schema, col.udt_name, col.domain_catalog, col.domain_schema, col.domain_name, col_description(c.oid, col.ordinal_position) AS comment, col.column_default AS col_default, col.is_identity, col.identity_generation, col.identity_start, col.identity_increment, col.identity_maximum, col.identity_minimum, seq.seqcache::information_schema.character_data AS identity_cache, col.identity_cycle, col.is_generated, col.generation_expression, b.attacl, colnsp.nspname AS collation_schema_name, coll.collname, c.relkind, b.attfdwoptions AS foreign_options FROM information_schema.columns AS col LEFT JOIN pg_namespace ns ON ns.nspname = col.table_schema LEFT JOIN pg_class c ON col.table_name = c.relname AND c.relnamespace = ns.oid LEFT JOIN pg_attrdef a ON c.oid = a.adrelid AND col.ordinal_position = a.adnum LEFT JOIN pg_attribute b ON b.attrelid = c.oid AND b.attname = col.column_name LEFT JOIN pg_type et ON et.oid = b.atttypid LEFT JOIN pg_collation coll ON coll.oid = b.attcollation LEFT JOIN pg_namespace colnsp ON coll.collnamespace = colnsp.oid LEFT JOIN (pg_depend dep JOIN pg_sequence seq ON dep.classid = 'pg_class'::regclass::oid AND dep.objid = seq.seqrelid AND dep.deptype = 'i'::"char") ON dep.refclassid = 'pg_class'::regclass::oid AND dep.refobjid = c.oid AND dep.refobjsubid = b.attnum LEFT JOIN pg_type bt ON et.typelem = bt.oid LEFT JOIN pg_namespace nbt ON bt.typnamespace = nbt.oid WHERE col.table_schema = 'public' AND col.table_name = 'knowledge' ORDER BY col.table_schema, col.table_name, col.ordinal_position

 SELECT n.nspname AS rule_schema, c.relname, r.rulename, r.oid, r.ev_type, r.is_instead, r.ev_enabled, pg_get_ruledef(r.oid) AS definition, obj_description(r.oid) AS comment FROM ((pg_rewrite r JOIN pg_class c ON ((c.oid = r.ev_class))) LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace))) WHERE (r.rulename <> '_RETURN'::name) AND (n.nspname='public') AND (c.relname='knowledge') ORDER BY c.relname, r.oid ASC

 SELECT t.oid AS oid, (n.nspname)::information_schema.sql_identifier AS trigger_schema, (t.tgname)::information_schema.sql_identifier AS trigger_name, (c.relname)::information_schema.sql_identifier AS trigger_table_name, (em.text)::information_schema.character_data AS event_manipulation, (c.relkind)::information_schema.sql_identifier AS trigger_table_type, (nsp.nspname)::information_schema.sql_identifier AS referenced_table_schema, (cs.relname)::information_schema.sql_identifier AS referenced_table, t.tgdeferrable AS is_deferrable, t.tginitdeferred AS is_deferred, (np.nspname)::information_schema.sql_identifier AS function_schema, (p.proname)::information_schema.sql_identifier AS function_name, ("substring"(pg_get_triggerdef(t.oid), ("position"("substring"(pg_get_triggerdef(t.oid), 48), 'EXECUTE FUNCTION'::text) + 47)))::information_schema.character_data AS action_statement, (CASE WHEN (((t.tgtype)::integer & 1) = 1) THEN 'ROW'::text ELSE 'STATEMENT'::text END)::information_schema.character_data AS for_each, (CASE WHEN (((t.tgtype)::integer & 2) = 2) THEN 'BEFORE'::text ELSE 'AFTER'::text END)::information_schema.character_data AS fire_time, t.tgenabled AS enabled, (CASE WHEN pg_has_role(c.relowner, 'USAGE'::text) THEN (SELECT rm.m[1] AS m FROM regexp_matches(pg_get_triggerdef(t.oid), (E'.{35,} WHEN \((.+)\) EXECUTE FUNCTION'::text)) rm(m) LIMIT 1) ELSE NULL::text END)::information_schema.character_data AS condition, tc.event_object_column AS update_columns, (t.tgconstraint > 0) AS is_constraint, t.tgisinternal AS is_internal, obj_description(t.oid) AS comment FROM pg_trigger t INNER JOIN pg_class c ON t.tgrelid = c.oid LEFT JOIN pg_namespace n ON c.relnamespace = n.oid LEFT JOIN pg_proc p ON t.tgfoid = p.oid LEFT JOIN pg_namespace np ON p.pronamespace = np.oid LEFT JOIN (((SELECT 4, 'INSERT' UNION ALL SELECT 8, 'DELETE') UNION ALL SELECT 16, 'UPDATE') UNION ALL SELECT 32, 'TRUNCATE') em(num, text) ON ((t.tgtype)::integer & em.num) <> 0 LEFT OUTER JOIN (SELECT oid, relnamespace, relname FROM pg_class) cs ON (t.tgconstrrelid = cs.oid) LEFT OUTER JOIN (SELECT oid, nspname FROM pg_namespace) nsp ON (cs.relnamespace = nsp.oid) LEFT JOIN information_schema.triggered_update_columns tc ON (tc.trigger_schema = n.nspname) AND (tc.trigger_name = t.tgname) AND (tc.event_object_schema = n.nspname) AND (tc.event_object_table = c.relname) WHERE (n.nspname)::information_schema.sql_identifier = 'public' AND (c.relname)::information_schema.sql_identifier = 'knowledge' ORDER BY c.relname, t.tgname ASC

 SELECT opc.oid, opc.opcname, nsp.nspname FROM pg_opclass opc, pg_namespace nsp WHERE opc.opcnamespace = nsp.oid

 SELECT opr.oid, opr.oprname, nsp.nspname FROM pg_operator opr, pg_namespace nsp WHERE opr.oprnamespace = nsp.oid
2024-04-25 17:55:45.867 -03 [16872] LOG:  comando: SELECT c.oid, c.conname, c.contype, c.condeferrable, c.condeferred, c.conkey, c.confupdtype, c.confdeltype, c.confmatchtype, pg_get_constraintdef(c.oid, true) AS consrc12, t.relname AS tablename, fns.nspname AS foreign_schema, f.relname AS foreign_table, obj_description(c.oid) AS comment, ts.spcname, i.reloptions AS param, c.conindid, am.amname, pg_get_expr(ci.indpred, ci.indrelid, true) where_predicate, t.relkind, connoinherit FROM pg_constraint c LEFT JOIN pg_namespace ns ON (c.connamespace = ns.oid) LEFT JOIN pg_class t ON (c.conrelid = t.oid) LEFT JOIN pg_class i ON (c.conname = i.relname) AND (c.connamespace = i.relnamespace) LEFT JOIN pg_class f ON (c.confrelid = f.oid) LEFT JOIN pg_namespace fns ON (f.relnamespace = fns.oid) LEFT JOIN pg_tablespace ts ON (i.reltablespace = ts.oid) LEFT JOIN pg_am am ON (i.relam = am.oid) LEFT JOIN pg_index ci ON (c.conindid = ci.indexrelid) WHERE ns.nspname = 'public' AND t.relname = 'knowledge' ORDER BY t.relname, i.oid
2024-04-25 17:55:45.872 -03 [16872] LOG:  comando: SELECT t.relname AS tablename, fns.nspname AS foreign_schema, f.relname AS foreign_table, c.conname, c.confkey, a.attname AS foreign_field, a.attnum FROM pg_constraint c LEFT JOIN pg_namespace ns ON (c.connamespace = ns.oid) LEFT JOIN pg_class t ON (c.conrelid = t.oid) INNER JOIN pg_class f ON (c.confrelid = f.oid) LEFT JOIN pg_namespace fns ON (f.relnamespace = fns.oid) INNER JOIN pg_attribute a ON (a.attrelid = f.oid) WHERE a.attnum > 0 AND ns.nspname = 'public' AND t.relname = 'knowledge' ORDER BY t.relname, c.conname, a.attnum
2024-04-25 17:55:45.875 -03 [16872] LOG:  comando: SELECT i.indrelid AS oid, ci.relname AS indexname, ct.relname AS tablename, am.amname, con.conexclop,i.indkey, i.indclass, i.indnatts, i.indoption ,i.indexrelid FROM pg_index i LEFT JOIN pg_class ct ON ct.oid = i.indrelid LEFT JOIN pg_class ci ON ci.oid = i.indexrelid LEFT JOIN pg_namespace tns ON tns.oid = ct.relnamespace LEFT JOIN pg_namespace ins ON ins.oid = ci.relnamespace LEFT JOIN pg_tablespace ts ON ci.reltablespace = ts.oid LEFT JOIN pg_am am ON ci.relam = am.oid LEFT JOIN pg_depend dep ON dep.classid = ci.tableoid AND dep.objid = ci.oid AND dep.refobjsubid = '0' LEFT JOIN pg_constraint con ON con.tableoid = dep.refclassid AND con.oid = dep.refobjid AND con.contype = 'x' WHERE tns.nspname = 'public' AND ct.relname = 'knowledge' AND conname IS NOT NULL
2024-04-25 17:55:45.877 -03 [17971] LOG:  comando: SELECT c.oid, nsp.nspname, c.collname FROM pg_collation c left join pg_namespace nsp on nsp.oid = c.collnamespace
2024-04-25 17:55:45.882 -03 [17971] LOG:  comando: SELECT opc.oid, opc.opcname, nsp.nspname FROM pg_opclass opc, pg_namespace nsp WHERE opc.opcnamespace = nsp.oid
2024-04-25 17:55:45.884 -03 [17971] LOG:  comando: SELECT setting FROM pg_settings WHERE name = 'block_size'
2024-04-25 17:55:45.888 -03 [16872] LOG:  comando: SELECT ci.relname AS index_name, con.conname, i.indexrelid AS oid, ct.relname AS table_name, i.indrelid AS table_oid, am.amname AS index_type, i.indisunique AS is_unique, i.indisclustered AS is_clustered, i.indisprimary AS is_primary, pg_get_expr(indpred, indrelid, true) AS constraint, ts.spcname AS tablespace_name, pa.rolname AS owner, ci.reloptions, i.indkey, i.indclass, i.indnatts, i.indoption, i.indcollation AS collation, ci.relpages AS index_pages, obj_description(indexrelid) AS comment FROM pg_index i LEFT JOIN pg_class ct ON ct.oid = i.indrelid LEFT JOIN pg_class ci ON ci.oid = i.indexrelid LEFT JOIN pg_namespace tns ON tns.oid = ct.relnamespace LEFT JOIN pg_namespace ins ON ins.oid = ci.relnamespace LEFT JOIN pg_tablespace ts ON ci.reltablespace = ts.oid LEFT JOIN pg_am am ON ci.relam = am.oid LEFT JOIN pg_depend dep ON dep.classid = ci.tableoid AND dep.objid = ci.oid AND dep.refobjsubid = '0' LEFT JOIN pg_constraint con ON con.tableoid = dep.refclassid AND con.oid = dep.refobjid LEFT JOIN pg_roles pa ON pa.oid = ci.relowner WHERE ins.nspname = 'public' AND conname IS NULL AND ct.relname = 'knowledge' ORDER BY ct.relname, ins.nspname, ci.relname